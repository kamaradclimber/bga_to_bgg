#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bga_to_bgg'

bga = BgaToBgg::BGA::Client.new(username: ENV['BGA_USERNAME'], password: ENV['BGA_PASSWORD'], player_id: ENV['BGA_PLAYER_ID'])
bgg = BgaToBgg::BGG::Client.new(username: ENV['BGG_USERNAME'], password: ENV['BGG_PASSWORD'])
converter = BgaToBgg::BgaGameToBggGame.new

bga_plays = bga.history

bga_plays.group_by(&:name).each do |game_name, bga_plays_for_this_game|
  bgg_plays_from_bga = bga_plays_for_this_game.map { |play| converter.to_bgg(play) }
  game_id = bgg_plays_from_bga.first.game_id
  puts "[#{game_name}] bgg id: #{game_id}"
  existing_bgg_plays = bgg.plays(game_id: game_id)
  puts "[#{game_name}] Found #{existing_bgg_plays.size} logged games on BGG"
  non_bga_plays = existing_bgg_plays - bgg_plays_from_bga
  to_add_plays = bgg_plays_from_bga - existing_bgg_plays
  puts "[#{game_name}] Found #{non_bga_plays.size} plays BGG plays recorded through the app and #{to_add_plays.size} plays from BGA to add to BGG"

  to_add_plays.each do |play|
    bgg.log_play(play) unless ENV['DRYRUN']
    puts "[#{game_name}] Logged play from #{play.time} with #{play.scores.keys.join(', ')} to BGG"
  end
end
